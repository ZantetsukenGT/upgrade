{
	/* You must escape `\`, so `\\\\\\\\` matches `\\` in a test input. */
	"defines":
	{
		/*       */
		/* ATOMS */
		/*       */
		/* This is for only proper symbols that don't start with a number. */
		"symbol": "[a-zA-Z_@][a-zA-Z0-9_@]*",
		/* Floats can look like `0_1.2_3e4` - `_` doesn't work in the exponent and `a.b` is required. */
		"float": "-?[0-9]+(?:_[0-9]+)*\\.[0-9]+(?:_[0-9]+)*(?:[eE][0-9])?",
		"hex": "0[xX][0-9a-fA-F]+(?:_[0-9a-fA-F]+)*",
		"binary": "0[bB][01]+(?:_[01]+)*",
		"integer": "-?[0-9]+(?:_[0-9]+)*",
		/* Require \\ and ' to be escaped, but allow anything else to maybe be escaped. */
		"character": "'\\\\.'|'[^\\\\']'",
		/* Needs extra escapes to allow " in JSON. */
		"string": "\"(?:\\\\\\\\|\\\\\\\"|[^\\\"])*\"",
		"operator": "[*&^%!\\-=+\\/?\\|<>.:]+",
		/*       */
		/* PARTS */
		/*       */
		/* Now we can start building up more complex expressions. */
		"number": "(?&float)|(?&hex)|(?&binary)|(?&integer)",
		"tag": "(?&symbol)\\s*:|\\{\\s*(?&symbol)(?:\\s*,\\s*(?&symbol))*\\s*\\}\\s*:",
		"varargs": "(?&tag)?\\s*\\.\\.\\.",
		/*             */
		/* EXPRESSIONS */
		/*             */
		/* Expressions are very lax with their contents - any letters, numbers, and operators anywhere are fine. */
		"expressionpart": "(?&roundbrackets)|(?&curlybrackets)|(?&squarebrackets)|[*&^%!\\-=+\\/?\\|<>.:a-zA-Z0-9_@\\s]+|(?&string)|(?&character)",
		"expression": "(?&expressionpart)+",
		"squarebrackets": "\\[(?&expressionpart)*(?:[,;](?&expressionpart)*)*\\]",
		"roundbrackets": "\\((?&expressionpart)*(?:[,;](?&expressionpart)*)*\\)",
		"curlybrackets": "\\{(?&expressionpart)*(?:[,;](?&expressionpart)*)*\\}",
		/* Be careful with this, it is untested against expression parts, which also contain `>`. */
		"anglebrackets": "\\<(?&expressionpart)*(?:[,;](?&expressionpart)*)*\\>",
		"parameter": "(?:const\\s+)?(?:&\\s*)?(?:(?&tag)\\s*)?(?&symbol)(?:\\s*(?&squarebrackets))*(\\s*=\\s*(?&expression))?",
		/* Three types - at least one named parameter, only `...`, and nothing. */
		"parameterlist": "\\(\\s*(?&parameter)\\s*(?:,\\s*(?&parameter)\\s*)*(?:,\\s*(?&varargs)\\s*)?\\)|\\(\\s*(?&varargs)\\s*\\)|\\(\\s*\\)",
		/*              */
		/* DECLARATIONS */
		/*              */
		"publics": "forward\s+public|forward|public|hook\s+public|hook\s+callback|hook|HOOK_PUBLIC__|HOOK_CALLBACK__|HOOK__|@hook\s*(?&parameterlist)"
		"start": "^[ \t]*"
	},
	"replacements":
	[
		{
			"description": "Upgrading hooks to decorators",
			"from": "((?&start))(hook|HOOK__)\\s+([\\w@]+)\\s*\\(",
			"to": "$1@hook() $3("
		},
		{
			"description": "Upgrading timers to decorators",
			"from": "((?&start))(timer|TIMER__)\\s+([\\w@]+)\\s*\\[\\s*(.*?)\\s*\\]\\s*\\(",
			"to": "$1@timer($4) $3("
		},
		{
			"description": "Upgrading remote functions to decorators",
			"from": "((?&start))(remotefunc|REMOTEFUNC__)\\s+([\\w@]+)\\s*\\(",
			"to": "$1@remote() $3("
		},
		{
			"description": "Adding `PLAYER_STATE` tag to `OnPlayerStateChange`",
			"from": "((?&start))((?&publics))\\s+((?&symbol))?OnPlayerStateChange\\s*\\(\\s*playerid\\s*,\\s*newstate\\s*,\\s*oldstate\\s*\\)",
			"to": "$1#if !defined PLAYER_STATE\\n\\t#define PLAYER_STATE: _:\\n#endif\\n$2 $3OnPlayerStateChange(playerid, PLAYER_STATE:newstate, PLAYER_STATE:oldstate)"
		},
		{
			"description": "Adding `CLICK_SOURCE` tag to `OnPlayerClickPlayer`",
			"from": "((?&start))((?&publics))\\s+((?&symbol))?OnPlayerClickPlayer\\s*\\(\\s*playerid\\s*,\\s*clickedplayerid\\s*,\\s*source\\s*\\)",
			"to": "$1#if !defined CLICK_SOURCE\\n\\t#define CLICK_SOURCE: _:\\n#endif\\n$2 $3OnPlayerClickPlayer(playerid, clickedplayerid, CLICK_SOURCE:source)"
		},
		{
			"description": "Adding `EDIT_RESPONSE` tag to `OnPlayerEditObject`",
			"from": "((?&start))((?&publics))\\s+((?&symbol))?OnPlayerEditObject\\s*\\(\\s*playerid\\s*,\\s*playerobject\\s*,\\s*objectid\\s*,\\s*response\\s*,\\s*Float\\s*:\\s*fX\\s*,\\s*Float\\s*:\\s*fY\\s*,\\s*Float\\s*:\\s*fZ\\s*,\\s*Float\\s*:\\s*fRotX\\s*,\\s*Float\\s*:\\s*fRotY\\s*,\\s*Float\\s*:\\s*fRotZ\\s*\\)",
			"to": "$1#if !defined EDIT_RESPONSE\\n\\t#define EDIT_RESPONSE: _:\\n#endif\\n$2 $3OnPlayerEditObject(playerid, playerobject, objectid, EDIT_RESPONSE:response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)"
		},
		{
			"description": "Adding `EDIT_RESPONSE` tag to `OnPlayerEditAttachedObject`",
			"from": "((?&start))((?&publics))\\s+((?&symbol))?OnPlayerEditAttachedObject\\s*\\(\\s*playerid\\s*,\\s*response\\s*,\\s*index\\s*,\\s*modelid\\s*,\\s*boneid\\s*,\\s*Float\\s*:\\s*fOffsetX\\s*,\\s*Float\\s*:\\s*fOffsetY\\s*,\\s*Float\\s*:\\s*fOffsetZ\\s*,\\s*Float\\s*:\\s*fRotX\\s*,\\s*Float\\s*:\\s*fRotY\\s*,\\s*Float\\s*:\\s*fRotZ\\s*,\\s*Float\\s*:\\s*fScaleX\\s*,\\s*Float\\s*:\\s*fScaleY\\s*,\\s*Float\\s*:\\s*fScaleZ\\s*\\)",
			"to": "$1#if !defined EDIT_RESPONSE\\n\\t#define EDIT_RESPONSE: _:\\n#endif\\n$2 $3OnPlayerEditAttachedObject(playerid, EDIT_RESPONSE:response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)"
		},
		{
			"description": "Adding `SELECT_OBJECT` tag to `OnPlayerSelectObject`",
			"from": "((?&start))((?&publics))\\s+((?&symbol))?OnPlayerSelectObject\\s*\\(\\s*playerid\\s*,\\s*type\\s*,\\s*objectid\\s*,\\s*modelid\\s*,\\s*Float\\s*:\\s*fX\\s*,\\s*Float\\s*:\\s*fY\\s*,\\s*Float\\s*:\\s*fZ\\s*\\)",
			"to": "$1#if !defined SELECT_OBJECT\\n\\t#define SELECT_OBJECT: _:\\n#endif\\n$2 $3OnPlayerSelectObject(playerid, SELECT_OBJECT:type, objectid, modelid, Float:fX, Float:fY, Float:fZ)"
		},
		{
			"description": "Adding `BULLET_HIT_TYPE` tag to `OnPlayerWeaponShot`",
			"from": "((?&start))((?&publics))\\s+((?&symbol))?OnPlayerWeaponShot\\s*\\(\\s*playerid\\s*,\\s*weaponid\\s*,\\s*hittype\\s*,\\s*hitid\\s*,\\s*Float\\s*:\\s*fX\\s*,\\s*Float\\s*:\\s*fY\\s*,\\s*Float\\s*:\\s*fZ\\s*\\)",
			"to": "$1#if !defined BULLET_HIT_TYPE\\n\\t#define BULLET_HIT_TYPE: _:\\n#endif\\n$2 $3OnPlayerWeaponShot(playerid, weaponid, BULLET_HIT_TYPE:hittype, hitid, Float:fX, Float:fY, Float:fZ)"
		},
		{
			"description": "Adding `KEY` tag to `OnPlayerKeyStateChange`",
			"from": "((?&start))((?&publics))\\s+((?&symbol))?OnPlayerKeyStateChange\\s*\\(\\s*playerid\\s*,\\s*newkeys\\s*,\\s*oldkeys\\s*\\)",
			"to": "$1#if !defined KEY\\n\\t#define KEY: _:\\n#endif\\n$2 $3OnPlayerKeyStateChange(playerid, KEY:newkeys, KEY:oldkeys)"
		},
		{
			"description": "Adding `DOWNLOAD_REQUEST` tag to `OnPlayerRequestDownload`",
			"from": "((?&start))((?&publics))\\s+((?&symbol))?OnPlayerRequestDownload\\s*\\(\\s*playerid\\s*,\\s*type\\s*,\\s*crc\\s*\\)",
			"to": "$1#if !defined DOWNLOAD_REQUEST\\n\\t#define DOWNLOAD_REQUEST: _:\\n#endif\\n$2 $3OnPlayerRequestDownload(playerid, DOWNLOAD_REQUEST:type, crc)"
		},
		{
			"description": "Adding `STREAMER_TYPE` tag to `Streamer_OnItemStreamIn`",
			"from": "((?&start))((?&publics))\\s+((?&symbol))?Streamer_OnItemStreamIn\\s*\\(\\s*type\\s*,\\s*(STREAMER_ALL_TAGS\\s*:\\s*)?id\\s*,\\s*forplayerid\\s*\\)",
			"to": "$1#if !defined STREAMER_TYPE\\n\\t#define STREAMER_TYPE: _:\\n#endif\\n$2 $3Streamer_OnItemStreamIn(STREAMER_TYPE:type, $4id, forplayerid)"
		},
		{
			"description": "Adding `STREAMER_TYPE` tag to `Streamer_OnItemStreamOut`",
			"from": "((?&start))((?&publics))\\s+((?&symbol))?Streamer_OnItemStreamOut\\s*\\(\\s*type\\s*,\\s*(STREAMER_ALL_TAGS\\s*:\\s*)?id\\s*,\\s*forplayerid\\s*\\)",
			"to": "$1#if !defined STREAMER_TYPE\\n\\t#define STREAMER_TYPE: _:\\n#endif\\n$2 $3Streamer_OnItemStreamOut(STREAMER_TYPE:type, $4id, forplayerid)"
		}
	]
}

